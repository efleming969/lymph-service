"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const NativeHTTP = require("https");
const URL = require("url");
class HTTP {
    constructor(baseUrl) {
        const baseUrlParts = URL.parse(baseUrl);
        this.protocol = baseUrlParts.protocol;
        this.hostname = baseUrlParts.hostname;
        this.port = baseUrlParts.port;
    }
    get(path) {
        return new Promise((resolve, reject) => {
            const options = {
                protocol: this.protocol,
                hostname: this.hostname,
                port: this.port,
                path: path,
                method: "GET"
            };
            const req = NativeHTTP.request(options, function (res) {
                let data = [];
                res.setEncoding("utf8");
                res.on("data", function (chunk) {
                    data.push(chunk);
                });
                res.on("end", function () {
                    resolve(JSON.parse(data.join("")));
                });
            });
            req.on("error", function (err) {
                reject(err);
            });
            req.end();
        });
    }
    post(path, data) {
        const serialized_data = JSON.stringify(data);
        return new Promise((resolve, reject) => {
            const options = {
                protocol: this.protocol,
                hostname: this.hostname,
                port: this.port,
                path: path,
                method: "POST",
                headers: {
                    "Content-type": "application/json",
                    "Content-length": serialized_data.length
                }
            };
            const req = NativeHTTP.request(options, function (res) {
                let response_data = [];
                res.setEncoding("utf8");
                res.on("data", function (chunk) {
                    response_data.push(chunk);
                });
                res.on("end", function () {
                    let body = undefined;
                    try {
                        body = JSON.parse(response_data.join(""));
                    }
                    catch (e) {
                    }
                    resolve({
                        status: res.statusCode,
                        headers: res.headers,
                        body: body
                    });
                });
            });
            req.on("error", function (error) {
                reject(error);
            });
            req.write(serialized_data);
            req.end();
        });
    }
}
exports.default = HTTP;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSFRUUC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkhUVFAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvQ0FBbUM7QUFDbkMsMkJBQTBCO0FBRTFCO0lBS0ksWUFBYyxPQUFlO1FBQ3pCLE1BQU0sWUFBWSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUUsT0FBTyxDQUFFLENBQUE7UUFDekMsSUFBSSxDQUFDLFFBQVEsR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFBO1FBQ3JDLElBQUksQ0FBQyxRQUFRLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQTtRQUNyQyxJQUFJLENBQUMsSUFBSSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUE7SUFDakMsQ0FBQztJQUVELEdBQUcsQ0FBRyxJQUFZO1FBQ2QsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFFLENBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRyxFQUFFO1lBRXRDLE1BQU0sT0FBTyxHQUFHO2dCQUNaLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtnQkFDckIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO2dCQUN2QixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7Z0JBQ2YsSUFBSSxFQUFFLElBQUk7Z0JBQ1YsTUFBTSxFQUFFLEtBQUs7YUFDbEIsQ0FBQTtZQUVELE1BQU0sR0FBRyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUUsT0FBTyxFQUFFLFVBQVcsR0FBRztnQkFDbkQsSUFBSSxJQUFJLEdBQWEsRUFBRSxDQUFBO2dCQUV2QixHQUFHLENBQUMsV0FBVyxDQUFFLE1BQU0sQ0FBRSxDQUFBO2dCQUV6QixHQUFHLENBQUMsRUFBRSxDQUFFLE1BQU0sRUFBRSxVQUFXLEtBQWE7b0JBQ3BDLElBQUksQ0FBQyxJQUFJLENBQUUsS0FBSyxDQUFFLENBQUE7Z0JBQ3RCLENBQUMsQ0FBRSxDQUFBO2dCQUVILEdBQUcsQ0FBQyxFQUFFLENBQUUsS0FBSyxFQUFFO29CQUNYLE9BQU8sQ0FBRSxJQUFJLENBQUMsS0FBSyxDQUFFLElBQUksQ0FBQyxJQUFJLENBQUUsRUFBRSxDQUFFLENBQUUsQ0FBRSxDQUFBO2dCQUM1QyxDQUFDLENBQUUsQ0FBQTtZQUNQLENBQUMsQ0FBRSxDQUFBO1lBRUgsR0FBRyxDQUFDLEVBQUUsQ0FBRSxPQUFPLEVBQUUsVUFBVyxHQUFHO2dCQUMzQixNQUFNLENBQUUsR0FBRyxDQUFFLENBQUE7WUFDakIsQ0FBQyxDQUFFLENBQUE7WUFFSCxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUE7UUFDYixDQUFDLENBQUUsQ0FBQTtJQUNQLENBQUM7SUFFRCxJQUFJLENBQUcsSUFBWSxFQUFFLElBQVM7UUFDMUIsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBRSxJQUFJLENBQUUsQ0FBQTtRQUU5QyxNQUFNLENBQUMsSUFBSSxPQUFPLENBQUUsQ0FBRSxPQUFPLEVBQUUsTUFBTSxFQUFHLEVBQUU7WUFDdEMsTUFBTSxPQUFPLEdBQUc7Z0JBQ1osUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO2dCQUN2QixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7Z0JBQ3ZCLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtnQkFDZixJQUFJLEVBQUUsSUFBSTtnQkFDVixNQUFNLEVBQUUsTUFBTTtnQkFDZCxPQUFPLEVBQUU7b0JBQ0wsY0FBYyxFQUFFLGtCQUFrQjtvQkFDbEMsZ0JBQWdCLEVBQUUsZUFBZSxDQUFDLE1BQU07aUJBQzNDO2FBQ0osQ0FBQTtZQUVELE1BQU0sR0FBRyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUUsT0FBTyxFQUFFLFVBQVcsR0FBRztnQkFDbkQsSUFBSSxhQUFhLEdBQWEsRUFBRSxDQUFBO2dCQUVoQyxHQUFHLENBQUMsV0FBVyxDQUFFLE1BQU0sQ0FBRSxDQUFBO2dCQUV6QixHQUFHLENBQUMsRUFBRSxDQUFFLE1BQU0sRUFBRSxVQUFXLEtBQWE7b0JBQ3BDLGFBQWEsQ0FBQyxJQUFJLENBQUUsS0FBSyxDQUFFLENBQUE7Z0JBQy9CLENBQUMsQ0FBRSxDQUFBO2dCQUVILEdBQUcsQ0FBQyxFQUFFLENBQUUsS0FBSyxFQUFFO29CQUNYLElBQUksSUFBSSxHQUFHLFNBQVMsQ0FBQTtvQkFFcEIsSUFBSSxDQUFDO3dCQUNELElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUUsRUFBRSxDQUFFLENBQUUsQ0FBQTtvQkFDakQsQ0FBQztvQkFBQyxLQUFLLENBQUMsQ0FBRSxDQUFFLENBQUMsQ0FBQyxDQUFDO29CQUNmLENBQUM7b0JBQ0QsT0FBTyxDQUFFO3dCQUNMLE1BQU0sRUFBRSxHQUFHLENBQUMsVUFBVTt3QkFDdEIsT0FBTyxFQUFFLEdBQUcsQ0FBQyxPQUFPO3dCQUNwQixJQUFJLEVBQUUsSUFBSTtxQkFDYixDQUFFLENBQUE7Z0JBQ1AsQ0FBQyxDQUFFLENBQUE7WUFDUCxDQUFDLENBQUUsQ0FBQTtZQUVILEdBQUcsQ0FBQyxFQUFFLENBQUUsT0FBTyxFQUFFLFVBQVcsS0FBSztnQkFDN0IsTUFBTSxDQUFFLEtBQUssQ0FBRSxDQUFBO1lBQ25CLENBQUMsQ0FBRSxDQUFBO1lBRUgsR0FBRyxDQUFDLEtBQUssQ0FBRSxlQUFlLENBQUUsQ0FBQTtZQUM1QixHQUFHLENBQUMsR0FBRyxFQUFFLENBQUE7UUFDYixDQUFDLENBQUUsQ0FBQTtJQUNQLENBQUM7Q0FDSjtBQTdGRCx1QkE2RkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBOYXRpdmVIVFRQIGZyb20gXCJodHRwc1wiXG5pbXBvcnQgKiBhcyBVUkwgZnJvbSBcInVybFwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhUVFAge1xuICAgIHByb3RvY29sOiBzdHJpbmdcbiAgICBob3N0bmFtZTogc3RyaW5nXG4gICAgcG9ydDogc3RyaW5nXG5cbiAgICBjb25zdHJ1Y3RvciAoIGJhc2VVcmw6IHN0cmluZyApIHtcbiAgICAgICAgY29uc3QgYmFzZVVybFBhcnRzID0gVVJMLnBhcnNlKCBiYXNlVXJsIClcbiAgICAgICAgdGhpcy5wcm90b2NvbCA9IGJhc2VVcmxQYXJ0cy5wcm90b2NvbFxuICAgICAgICB0aGlzLmhvc3RuYW1lID0gYmFzZVVybFBhcnRzLmhvc3RuYW1lXG4gICAgICAgIHRoaXMucG9ydCA9IGJhc2VVcmxQYXJ0cy5wb3J0XG4gICAgfVxuXG4gICAgZ2V0ICggcGF0aDogc3RyaW5nICk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSggKCByZXNvbHZlLCByZWplY3QgKSA9PiB7XG5cbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgcHJvdG9jb2w6IHRoaXMucHJvdG9jb2xcbiAgICAgICAgICAgICAgICAsIGhvc3RuYW1lOiB0aGlzLmhvc3RuYW1lXG4gICAgICAgICAgICAgICAgLCBwb3J0OiB0aGlzLnBvcnRcbiAgICAgICAgICAgICAgICAsIHBhdGg6IHBhdGhcbiAgICAgICAgICAgICAgICAsIG1ldGhvZDogXCJHRVRcIlxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCByZXEgPSBOYXRpdmVIVFRQLnJlcXVlc3QoIG9wdGlvbnMsIGZ1bmN0aW9uICggcmVzICkge1xuICAgICAgICAgICAgICAgIGxldCBkYXRhOiBzdHJpbmdbXSA9IFtdXG5cbiAgICAgICAgICAgICAgICByZXMuc2V0RW5jb2RpbmcoIFwidXRmOFwiIClcblxuICAgICAgICAgICAgICAgIHJlcy5vbiggXCJkYXRhXCIsIGZ1bmN0aW9uICggY2h1bms6IHN0cmluZyApIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wdXNoKCBjaHVuayApXG4gICAgICAgICAgICAgICAgfSApXG5cbiAgICAgICAgICAgICAgICByZXMub24oIFwiZW5kXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSggSlNPTi5wYXJzZSggZGF0YS5qb2luKCBcIlwiICkgKSApXG4gICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICB9IClcblxuICAgICAgICAgICAgcmVxLm9uKCBcImVycm9yXCIsIGZ1bmN0aW9uICggZXJyICkge1xuICAgICAgICAgICAgICAgIHJlamVjdCggZXJyIClcbiAgICAgICAgICAgIH0gKVxuXG4gICAgICAgICAgICByZXEuZW5kKClcbiAgICAgICAgfSApXG4gICAgfVxuXG4gICAgcG9zdCAoIHBhdGg6IHN0cmluZywgZGF0YTogYW55ICk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGNvbnN0IHNlcmlhbGl6ZWRfZGF0YSA9IEpTT04uc3RyaW5naWZ5KCBkYXRhIClcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoICggcmVzb2x2ZSwgcmVqZWN0ICkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBwcm90b2NvbDogdGhpcy5wcm90b2NvbCxcbiAgICAgICAgICAgICAgICBob3N0bmFtZTogdGhpcy5ob3N0bmFtZSxcbiAgICAgICAgICAgICAgICBwb3J0OiB0aGlzLnBvcnQsXG4gICAgICAgICAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJDb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiQ29udGVudC1sZW5ndGhcIjogc2VyaWFsaXplZF9kYXRhLmxlbmd0aFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcmVxID0gTmF0aXZlSFRUUC5yZXF1ZXN0KCBvcHRpb25zLCBmdW5jdGlvbiAoIHJlcyApIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVzcG9uc2VfZGF0YTogc3RyaW5nW10gPSBbXVxuXG4gICAgICAgICAgICAgICAgcmVzLnNldEVuY29kaW5nKCBcInV0ZjhcIiApXG5cbiAgICAgICAgICAgICAgICByZXMub24oIFwiZGF0YVwiLCBmdW5jdGlvbiAoIGNodW5rOiBzdHJpbmcgKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlX2RhdGEucHVzaCggY2h1bmsgKVxuICAgICAgICAgICAgICAgIH0gKVxuXG4gICAgICAgICAgICAgICAgcmVzLm9uKCBcImVuZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBib2R5ID0gdW5kZWZpbmVkXG5cbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkgPSBKU09OLnBhcnNlKCByZXNwb25zZV9kYXRhLmpvaW4oIFwiXCIgKSApXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKCBlICkge1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogcmVzLnN0YXR1c0NvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiByZXMuaGVhZGVycyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IGJvZHlcbiAgICAgICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICAgICAgfSApXG4gICAgICAgICAgICB9IClcblxuICAgICAgICAgICAgcmVxLm9uKCBcImVycm9yXCIsIGZ1bmN0aW9uICggZXJyb3IgKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KCBlcnJvciApXG4gICAgICAgICAgICB9IClcblxuICAgICAgICAgICAgcmVxLndyaXRlKCBzZXJpYWxpemVkX2RhdGEgKVxuICAgICAgICAgICAgcmVxLmVuZCgpXG4gICAgICAgIH0gKVxuICAgIH1cbn1cbiJdfQ==